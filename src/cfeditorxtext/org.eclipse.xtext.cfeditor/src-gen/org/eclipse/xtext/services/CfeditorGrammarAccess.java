/*
* generated by Xtext
*/

package org.eclipse.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CfeditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CfModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CfModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//CfModel:
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final RuleCall cPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractElement:
		//	Part;
		public ParserRule getRule() { return rule; }

		//Part
		public RuleCall getPartParserRuleCall() { return cPartParserRuleCall; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBundleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Part:
		//	Bundle | Body;
		public ParserRule getRule() { return rule; }

		//Bundle | Body
		public Alternatives getAlternatives() { return cAlternatives; }

		//Bundle
		public RuleCall getBundleParserRuleCall_0() { return cBundleParserRuleCall_0; }

		//Body
		public RuleCall getBodyParserRuleCall_1() { return cBodyParserRuleCall_1; }
	}

	public class BundleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bundle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBundleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentComponentParserRuleCall_1_0 = (RuleCall)cComponentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPromiseTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPromiseTypePromiseTypeParserRuleCall_4_0_0 = (RuleCall)cPromiseTypeAssignment_4_0.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cMethodsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMethodsMethodeParserRuleCall_4_2_0 = (RuleCall)cMethodsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Bundle:
		//	"bundle" component=Component name=ID "{" (promiseType+=PromiseType ":" methods+=Methode*)* "}";
		public ParserRule getRule() { return rule; }

		//"bundle" component=Component name=ID "{" (promiseType+=PromiseType ":" methods+=Methode*)* "}"
		public Group getGroup() { return cGroup; }

		//"bundle"
		public Keyword getBundleKeyword_0() { return cBundleKeyword_0; }

		//component=Component
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//Component
		public RuleCall getComponentComponentParserRuleCall_1_0() { return cComponentComponentParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(promiseType+=PromiseType ":" methods+=Methode*)*
		public Group getGroup_4() { return cGroup_4; }

		//promiseType+=PromiseType
		public Assignment getPromiseTypeAssignment_4_0() { return cPromiseTypeAssignment_4_0; }

		//PromiseType
		public RuleCall getPromiseTypePromiseTypeParserRuleCall_4_0_0() { return cPromiseTypePromiseTypeParserRuleCall_4_0_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//methods+=Methode*
		public Assignment getMethodsAssignment_4_2() { return cMethodsAssignment_4_2; }

		//Methode
		public RuleCall getMethodsMethodeParserRuleCall_4_2_0() { return cMethodsMethodeParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentComponentParserRuleCall_1_0 = (RuleCall)cComponentAssignment_1.eContents().get(0);
		private final Assignment cPromiseTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPromiseTypeControlKeyword_2_0 = (Keyword)cPromiseTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Body:
		//	"body" component=Component promiseType="control" "{" "}";
		public ParserRule getRule() { return rule; }

		//"body" component=Component promiseType="control" "{" "}"
		public Group getGroup() { return cGroup; }

		//"body"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//component=Component
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//Component
		public RuleCall getComponentComponentParserRuleCall_1_0() { return cComponentComponentParserRuleCall_1_0; }

		//promiseType="control"
		public Assignment getPromiseTypeAssignment_2() { return cPromiseTypeAssignment_2; }

		//"control"
		public Keyword getPromiseTypeControlKeyword_2_0() { return cPromiseTypeControlKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MethodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cZuweisungAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cZuweisungZuweisungParserRuleCall_1_1_0_0 = (RuleCall)cZuweisungAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cZuweisungAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cZuweisungZuweisungParserRuleCall_1_1_1_1_0 = (RuleCall)cZuweisungAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Methode:
		//	name=STRING (";" | zuweisung+=Zuweisung ("," zuweisung+=Zuweisung)* ";");
		public ParserRule getRule() { return rule; }

		//name=STRING (";" | zuweisung+=Zuweisung ("," zuweisung+=Zuweisung)* ";")
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//";" | zuweisung+=Zuweisung ("," zuweisung+=Zuweisung)* ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//zuweisung+=Zuweisung ("," zuweisung+=Zuweisung)* ";"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//zuweisung+=Zuweisung
		public Assignment getZuweisungAssignment_1_1_0() { return cZuweisungAssignment_1_1_0; }

		//Zuweisung
		public RuleCall getZuweisungZuweisungParserRuleCall_1_1_0_0() { return cZuweisungZuweisungParserRuleCall_1_1_0_0; }

		//("," zuweisung+=Zuweisung)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//zuweisung+=Zuweisung
		public Assignment getZuweisungAssignment_1_1_1_1() { return cZuweisungAssignment_1_1_1_1; }

		//Zuweisung
		public RuleCall getZuweisungZuweisungParserRuleCall_1_1_1_1_0() { return cZuweisungZuweisungParserRuleCall_1_1_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_2() { return cSemicolonKeyword_1_1_2; }
	}

	public class ZuweisungElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Zuweisung");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Zuweisung:
		//	name=ID ("=>" (ID | STRING)*)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=>" (ID | STRING)*)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=>" (ID | STRING)*)?
		public Group getGroup_1() { return cGroup_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }

		//(ID | STRING)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1_1() { return cSTRINGTerminalRuleCall_1_1_1; }
	}

	public class PromiseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PromiseType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAccessKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameClassesKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameCommandsKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameDatabasesKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameEnvironmentsKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameFilesKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameInferencesKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameInterfacesKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		private final Keyword cNameMeasurementsKeyword_0_8 = (Keyword)cNameAlternatives_0.eContents().get(8);
		private final Keyword cNameMethodsKeyword_0_9 = (Keyword)cNameAlternatives_0.eContents().get(9);
		private final Keyword cNameOccurrencesKeyword_0_10 = (Keyword)cNameAlternatives_0.eContents().get(10);
		private final Keyword cNameOutputsKeyword_0_11 = (Keyword)cNameAlternatives_0.eContents().get(11);
		private final Keyword cNamePackagesKeyword_0_12 = (Keyword)cNameAlternatives_0.eContents().get(12);
		private final Keyword cNameProcessesKeyword_0_13 = (Keyword)cNameAlternatives_0.eContents().get(13);
		private final Keyword cNameReportsKeyword_0_14 = (Keyword)cNameAlternatives_0.eContents().get(14);
		private final Keyword cNameRolesKeyword_0_15 = (Keyword)cNameAlternatives_0.eContents().get(15);
		private final Keyword cNameServicesKeyword_0_16 = (Keyword)cNameAlternatives_0.eContents().get(16);
		private final Keyword cNameStorageKeyword_0_17 = (Keyword)cNameAlternatives_0.eContents().get(17);
		private final Keyword cNameTopicsKeyword_0_18 = (Keyword)cNameAlternatives_0.eContents().get(18);
		private final Keyword cNameVarsKeyword_0_19 = (Keyword)cNameAlternatives_0.eContents().get(19);
		
		//PromiseType:
		//	name=("access" | "classes" | "commands" | "databases" | "environments" | "files" | "inferences" | "interfaces" |
		//	"measurements" | "methods" | "occurrences" | "outputs" | "packages" | "processes" | "reports" | "roles" | "services" |
		//	"storage" | "topics" | "vars");
		public ParserRule getRule() { return rule; }

		//name=("access" | "classes" | "commands" | "databases" | "environments" | "files" | "inferences" | "interfaces" |
		//"measurements" | "methods" | "occurrences" | "outputs" | "packages" | "processes" | "reports" | "roles" | "services" |
		//"storage" | "topics" | "vars")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"access" | "classes" | "commands" | "databases" | "environments" | "files" | "inferences" | "interfaces" |
		//"measurements" | "methods" | "occurrences" | "outputs" | "packages" | "processes" | "reports" | "roles" | "services" |
		//"storage" | "topics" | "vars"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"access"
		public Keyword getNameAccessKeyword_0_0() { return cNameAccessKeyword_0_0; }

		//"classes"
		public Keyword getNameClassesKeyword_0_1() { return cNameClassesKeyword_0_1; }

		//"commands"
		public Keyword getNameCommandsKeyword_0_2() { return cNameCommandsKeyword_0_2; }

		//"databases"
		public Keyword getNameDatabasesKeyword_0_3() { return cNameDatabasesKeyword_0_3; }

		//"environments"
		public Keyword getNameEnvironmentsKeyword_0_4() { return cNameEnvironmentsKeyword_0_4; }

		//"files"
		public Keyword getNameFilesKeyword_0_5() { return cNameFilesKeyword_0_5; }

		//"inferences"
		public Keyword getNameInferencesKeyword_0_6() { return cNameInferencesKeyword_0_6; }

		//"interfaces"
		public Keyword getNameInterfacesKeyword_0_7() { return cNameInterfacesKeyword_0_7; }

		//"measurements"
		public Keyword getNameMeasurementsKeyword_0_8() { return cNameMeasurementsKeyword_0_8; }

		//"methods"
		public Keyword getNameMethodsKeyword_0_9() { return cNameMethodsKeyword_0_9; }

		//"occurrences"
		public Keyword getNameOccurrencesKeyword_0_10() { return cNameOccurrencesKeyword_0_10; }

		//"outputs"
		public Keyword getNameOutputsKeyword_0_11() { return cNameOutputsKeyword_0_11; }

		//"packages"
		public Keyword getNamePackagesKeyword_0_12() { return cNamePackagesKeyword_0_12; }

		//"processes"
		public Keyword getNameProcessesKeyword_0_13() { return cNameProcessesKeyword_0_13; }

		//"reports"
		public Keyword getNameReportsKeyword_0_14() { return cNameReportsKeyword_0_14; }

		//"roles"
		public Keyword getNameRolesKeyword_0_15() { return cNameRolesKeyword_0_15; }

		//"services"
		public Keyword getNameServicesKeyword_0_16() { return cNameServicesKeyword_0_16; }

		//"storage"
		public Keyword getNameStorageKeyword_0_17() { return cNameStorageKeyword_0_17; }

		//"topics"
		public Keyword getNameTopicsKeyword_0_18() { return cNameTopicsKeyword_0_18; }

		//"vars"
		public Keyword getNameVarsKeyword_0_19() { return cNameVarsKeyword_0_19; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameCommonKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameAgentKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameServerKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameMonitorKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameRunagentKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameExecutorKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameKnowledgeKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameReporterKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		
		/// *
		//CompoundBody:
		//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
		//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
		//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
		//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
		//	'infer' | 'match_value');* /Component:
		//	name=("common" / *| 'hub'* / | "agent" | "server" | "monitor" | "runagent" | "executor" | "knowledge" | "reporter");
		public ParserRule getRule() { return rule; }

		/// *
		//CompoundBody:
		//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
		//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
		//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
		//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
		//	'infer' | 'match_value');* /name=("common" / *| 'hub'* / | "agent" | "server" | "monitor" | "runagent" | "executor" |
		//"knowledge" | "reporter")
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"common" / *| 'hub'* / / *
		//CompoundBody:
		//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
		//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
		//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
		//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
		//	'infer' | 'match_value');* /| "agent" | "server" | "monitor" | "runagent" | "executor" | "knowledge" | "reporter"
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"common"
		public Keyword getNameCommonKeyword_0_0() { return cNameCommonKeyword_0_0; }

		//"agent"
		public Keyword getNameAgentKeyword_0_1() { return cNameAgentKeyword_0_1; }

		//"server"
		public Keyword getNameServerKeyword_0_2() { return cNameServerKeyword_0_2; }

		//"monitor"
		public Keyword getNameMonitorKeyword_0_3() { return cNameMonitorKeyword_0_3; }

		//"runagent"
		public Keyword getNameRunagentKeyword_0_4() { return cNameRunagentKeyword_0_4; }

		//"executor"
		public Keyword getNameExecutorKeyword_0_5() { return cNameExecutorKeyword_0_5; }

		//"knowledge"
		public Keyword getNameKnowledgeKeyword_0_6() { return cNameKnowledgeKeyword_0_6; }

		//"reporter"
		public Keyword getNameReporterKeyword_0_7() { return cNameReporterKeyword_0_7; }
	}
	
	
	private CfModelElements pCfModel;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	private AbstractElementElements pAbstractElement;
	private PartElements pPart;
	private BundleElements pBundle;
	private BodyElements pBody;
	private MethodeElements pMethode;
	private ZuweisungElements pZuweisung;
	private PromiseTypeElements pPromiseType;
	private ComponentElements pComponent;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public CfeditorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//CfModel:
	//	elements+=AbstractElement*;
	public CfModelElements getCfModelAccess() {
		return (pCfModel != null) ? pCfModel : (pCfModel = new CfModelElements());
	}
	
	public ParserRule getCfModelRule() {
		return getCfModelAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	////terminal STRING:
	////	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | '"'))* '"' |
	////	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | "'"))* "'";
	////terminal STRING:
	////'"'('\\"'|!('"'))*'"';
	////TODO works but not fine when \" occurs
	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" .)* "\"" | "\'" (!("\\" | "\'") | "\\" .)* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//AbstractElement:
	//	Part;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Part:
	//	Bundle | Body;
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	//Bundle:
	//	"bundle" component=Component name=ID "{" (promiseType+=PromiseType ":" methods+=Methode*)* "}";
	public BundleElements getBundleAccess() {
		return (pBundle != null) ? pBundle : (pBundle = new BundleElements());
	}
	
	public ParserRule getBundleRule() {
		return getBundleAccess().getRule();
	}

	//Body:
	//	"body" component=Component promiseType="control" "{" "}";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//Methode:
	//	name=STRING (";" | zuweisung+=Zuweisung ("," zuweisung+=Zuweisung)* ";");
	public MethodeElements getMethodeAccess() {
		return (pMethode != null) ? pMethode : (pMethode = new MethodeElements());
	}
	
	public ParserRule getMethodeRule() {
		return getMethodeAccess().getRule();
	}

	//Zuweisung:
	//	name=ID ("=>" (ID | STRING)*)?;
	public ZuweisungElements getZuweisungAccess() {
		return (pZuweisung != null) ? pZuweisung : (pZuweisung = new ZuweisungElements());
	}
	
	public ParserRule getZuweisungRule() {
		return getZuweisungAccess().getRule();
	}

	//PromiseType:
	//	name=("access" | "classes" | "commands" | "databases" | "environments" | "files" | "inferences" | "interfaces" |
	//	"measurements" | "methods" | "occurrences" | "outputs" | "packages" | "processes" | "reports" | "roles" | "services" |
	//	"storage" | "topics" | "vars");
	public PromiseTypeElements getPromiseTypeAccess() {
		return (pPromiseType != null) ? pPromiseType : (pPromiseType = new PromiseTypeElements());
	}
	
	public ParserRule getPromiseTypeRule() {
		return getPromiseTypeAccess().getRule();
	}

	/// *
	//CompoundBody:
	//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
	//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
	//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
	//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
	//	'infer' | 'match_value');* /Component:
	//	name=("common" / *| 'hub'* / | "agent" | "server" | "monitor" | "runagent" | "executor" | "knowledge" | "reporter");
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
}
