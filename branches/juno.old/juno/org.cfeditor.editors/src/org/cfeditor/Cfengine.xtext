grammar org.cfeditor.Cfengine hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate cfengine "http://www.cfeditor.org/Cfengine"

/**Define Rule */
CfModel:
	(elements+=AbstractElement)*;
	
/*customize Terminals */
	terminal ID:
		('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*; //'!'
	//terminal INT returns ecore::EInt: //omittable?
	//	('0'..'9')+;
	
		//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | "'"))* "'";
	terminal STRING:
		'"' (!('\\' | '"') | '\\' .)* '"' |
		"'" (!('\\' | "'") | '\\' .)* "'";
	
	terminal SL_COMMENT:
		'#' !('\n' | '\r')* ('\r'? '\n')?;
	
	terminal WS:
		(' ' | '\t' | '\r' | '\n')+;
	
	terminal ANY_OTHER:
		.;

/*customize Terminals */


CLASS_ID:
	ID ('.' CLASS_ID)? | '!' CLASS_ID | '(' CLASS_ID ')' ('.' CLASS_ID)?;
	
	
AbstractElement:
	(Bundle | Body);
	
	Bundle:
		'bundle' component=BundleComponent name=ID ('(' variables+=ID (',' variables+=ID)* ')')? 
			'{' 
				(promiseType+=BundlePromiseType)* 
			'}';
			
		BundleComponent:
			name=ID;
			
		BundlePromiseType:
			name=ID ':' (promises+=BundlePromise)* (classes+=BundleClass)*;
		
			BundleClass:
				name=CLASS_ID '::' (promises+=BundlePromise)+; //TODO + or * ?
			BundlePromise:
				name=STRING (values+=PromiseValue (',' values+=PromiseValue)*)? ';';
				//name=STRING (values+=PromiseValue (',' values+=PromiseValue)*)* ';';
		
			PromiseValue:
				keyword=ID '=>' ((values+=STRING | functions+=SimpleFunction|values+=ID) | (
					'{' (values+=STRING | functions+=SimpleFunction)
					(',' (values+=STRING | functions+=SimpleFunction))* '}') | ('{' '@' '(' ID ')' '}')); 
					//TODO "| ID"?
					//	| '{''@' '(' ID ')' '}'); TODO?
		
					//(promiseType+=BundlePromiseType ':' ((PLACEHOLDERB) |
					//	'{' '@' (PLACEHOLDERB)* '}')*)*
					//	'}';
				SimpleFunction:
					id=ID '(' values+=STRING (',' values+=STRING)* ')';
		
					
	Body:
		'body' component=BodyComponent name=ID ('(' variables+=ID (',' variables+=ID)* ')')? 
			'{' 
				(promiseType+=BodyFunction)*
				(classes+=BodyClass)*
			'}'; 
			//BodyPromiseType '=>' (values+=STRING | '{' values+=STRING
			//		(',' values+=STRING)* '}') ';'
		BodyPromiseType:
			name=ID;
		
		BodyComponent:
			name=ID;	
			
		BodyClass:
			name=CLASS_ID '::' (promiseType+=BodyFunction)*;
		
		BodyFunction:
			name=BodyPromiseType '=>' (values+=STRING | List?='{' values+=STRING //TODO List? unnecessary
			(',' values+=STRING)* '}' | function+=SpecialFunction | '{' '@' '(' ID ')' '}') ';';
			//	(',' values+=STRING)* '}' | function+=SpecialFunction | '{' '@' (PLACEHOLDERB)* '}') ';';


			SpecialFunction:
				id=ID '(' 
					(ANY_OTHER | ID | STRING |  ',' | '$(' ID ')' | '${' ID '}' | func+=SpecialFunction)*
				
				/*(INT | STRING | ID | functions+=SpecialFunction) (',' (INT | STRING | ID | functions+=SpecialFunction))* */
					')';
