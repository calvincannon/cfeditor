/*
* generated by Xtext
*/

package edu.kit.scc.cfeditor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class CfeditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CfModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CfModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//CfModel:
		//	elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}

	public class PLACEHOLDERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PLACEHOLDER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PLACEHOLDER returns ecore::EString:
		//	ANY_OTHER | ID | STRING | "=>" | ";" | "," | "(" | ")";
		public ParserRule getRule() { return rule; }

		//ANY_OTHER | ID | STRING | "=>" | ";" | "," | "(" | ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0() { return cANY_OTHERTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final RuleCall cPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AbstractElement:
		//	Part;
		public ParserRule getRule() { return rule; }

		//Part
		public RuleCall getPartParserRuleCall() { return cPartParserRuleCall; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBundleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Part:
		//	Bundle | Body;
		public ParserRule getRule() { return rule; }

		//Bundle | Body
		public Alternatives getAlternatives() { return cAlternatives; }

		//Bundle
		public RuleCall getBundleParserRuleCall_0() { return cBundleParserRuleCall_0; }

		//Body
		public RuleCall getBodyParserRuleCall_1() { return cBodyParserRuleCall_1; }
	}

	public class BundleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bundle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBundleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentBundleComponentParserRuleCall_1_0 = (RuleCall)cComponentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cPLACEHOLDERParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPromiseTypeAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPromiseTypeBundlePromiseTypeParserRuleCall_5_0_0 = (RuleCall)cPromiseTypeAssignment_5_0.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cPLACEHOLDERParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Bundle:
		//	"bundle" component=BundleComponent name=ID PLACEHOLDER* "{" (promiseType+=BundlePromiseType ":" PLACEHOLDER*)*
		//	/ *(methods+=Methode)* * / "}";
		public ParserRule getRule() { return rule; }

		//"bundle" component=BundleComponent name=ID PLACEHOLDER* "{" (promiseType+=BundlePromiseType ":" PLACEHOLDER*)*
		/// *(methods+=Methode)* * / "}"
		public Group getGroup() { return cGroup; }

		//"bundle"
		public Keyword getBundleKeyword_0() { return cBundleKeyword_0; }

		//component=BundleComponent
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//BundleComponent
		public RuleCall getComponentBundleComponentParserRuleCall_1_0() { return cComponentBundleComponentParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//PLACEHOLDER*
		public RuleCall getPLACEHOLDERParserRuleCall_3() { return cPLACEHOLDERParserRuleCall_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(promiseType+=BundlePromiseType ":" PLACEHOLDER*)*
		public Group getGroup_5() { return cGroup_5; }

		//promiseType+=BundlePromiseType
		public Assignment getPromiseTypeAssignment_5_0() { return cPromiseTypeAssignment_5_0; }

		//BundlePromiseType
		public RuleCall getPromiseTypeBundlePromiseTypeParserRuleCall_5_0_0() { return cPromiseTypeBundlePromiseTypeParserRuleCall_5_0_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//PLACEHOLDER*
		public RuleCall getPLACEHOLDERParserRuleCall_5_2() { return cPLACEHOLDERParserRuleCall_5_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentBodyComponentParserRuleCall_1_0 = (RuleCall)cComponentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesIDTerminalRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVariablesIDTerminalRuleCall_3_2_1_0 = (RuleCall)cVariablesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPromiseTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPromiseTypeBodyFunctionParserRuleCall_5_0 = (RuleCall)cPromiseTypeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////BodyPromiseType '=>' (values+=STRING | '{' values+=STRING
		//Body:
		//	"body" component=BodyComponent name=ID ("(" variables+=ID ("," variables+=ID)* ")")? "{" promiseType+=BodyFunction*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"body" component=BodyComponent name=ID ("(" variables+=ID ("," variables+=ID)* ")")? "{" promiseType+=BodyFunction* "}"
		public Group getGroup() { return cGroup; }

		//"body"
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }

		//component=BodyComponent
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }

		//BodyComponent
		public RuleCall getComponentBodyComponentParserRuleCall_1_0() { return cComponentBodyComponentParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" variables+=ID ("," variables+=ID)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//variables+=ID
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//ID
		public RuleCall getVariablesIDTerminalRuleCall_3_1_0() { return cVariablesIDTerminalRuleCall_3_1_0; }

		//("," variables+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//variables+=ID
		public Assignment getVariablesAssignment_3_2_1() { return cVariablesAssignment_3_2_1; }

		//ID
		public RuleCall getVariablesIDTerminalRuleCall_3_2_1_0() { return cVariablesIDTerminalRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//promiseType+=BodyFunction*
		public Assignment getPromiseTypeAssignment_5() { return cPromiseTypeAssignment_5; }

		//BodyFunction
		public RuleCall getPromiseTypeBodyFunctionParserRuleCall_5_0() { return cPromiseTypeBodyFunctionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class BodyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBodyPromiseTypeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cListAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cListLeftCurlyBracketKeyword_2_1_0_0 = (Keyword)cListAssignment_2_1_0.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_2_1_0 = (RuleCall)cValuesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cFunctionAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cFunctionSpecialFunctionParserRuleCall_2_2_0 = (RuleCall)cFunctionAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	(',' values+=STRING)* '}') ';'
		//BodyFunction:
		//	name=BodyPromiseType "=>" (values+=STRING | List?="{" values+=STRING ("," values+=STRING)* "}" |
		//	function+=SpecialFunction) ";";
		public ParserRule getRule() { return rule; }

		//name=BodyPromiseType "=>" (values+=STRING | List?="{" values+=STRING ("," values+=STRING)* "}" |
		//function+=SpecialFunction) ";"
		public Group getGroup() { return cGroup; }

		//name=BodyPromiseType
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//BodyPromiseType
		public RuleCall getNameBodyPromiseTypeParserRuleCall_0_0() { return cNameBodyPromiseTypeParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//values+=STRING | List?="{" values+=STRING ("," values+=STRING)* "}" | function+=SpecialFunction
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//values+=STRING
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0_0() { return cValuesSTRINGTerminalRuleCall_2_0_0; }

		//List?="{" values+=STRING ("," values+=STRING)* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//List?="{"
		public Assignment getListAssignment_2_1_0() { return cListAssignment_2_1_0; }

		//"{"
		public Keyword getListLeftCurlyBracketKeyword_2_1_0_0() { return cListLeftCurlyBracketKeyword_2_1_0_0; }

		//values+=STRING
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_1_0; }

		//("," values+=STRING)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//values+=STRING
		public Assignment getValuesAssignment_2_1_2_1() { return cValuesAssignment_2_1_2_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_2_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_3() { return cRightCurlyBracketKeyword_2_1_3; }

		//function+=SpecialFunction
		public Assignment getFunctionAssignment_2_2() { return cFunctionAssignment_2_2; }

		//SpecialFunction
		public RuleCall getFunctionSpecialFunctionParserRuleCall_2_2_0() { return cFunctionSpecialFunctionParserRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class SpecialFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersSTRINGTerminalRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SpecialFunction:
		//	name=ID "(" parameters+=STRING ("," parameters+=STRING)* ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameters+=STRING ("," parameters+=STRING)* ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=STRING
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//STRING
		public RuleCall getParametersSTRINGTerminalRuleCall_2_0() { return cParametersSTRINGTerminalRuleCall_2_0; }

		//("," parameters+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=STRING
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//STRING
		public RuleCall getParametersSTRINGTerminalRuleCall_3_1_0() { return cParametersSTRINGTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class BundlePromiseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BundlePromiseType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// *Methode:
		//name=STRING (';'|zuweisung+=Zuweisung (','zuweisung+=Zuweisung)*';');
		//
		//Zuweisung:
		//name=ID ('=>' (ID|STRING)* )?;* /BundlePromiseType:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BodyPromiseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyPromiseType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// *BundlePromiseType:
		//	name=('access' | 'classes' | 'commands' | 'databases' | 'environments' | 'files' | 'inferences' | 'interfaces' |
		//	'measurements' | 'methods' | 'occurrences' | 'outputs' | 'packages' | 'processes' | 'reports' | 'roles' | 'services' |
		//	'storage' | 'topics' | 'vars');* /BodyPromiseType:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BundleComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BundleComponent");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// *BodyPromiseType:
		//	name=('aces' | 'acl_directory_inherit' | 'acl_method' | 'acl_type' | 'action_policy' | 'allow_blank_fields' |
		//	'associates' | 'atime' | 'audit' | 'background' | 'backward_relationship' | 'before_after' | 'bsdflags' |
		//	'cancel_kept' | 'cancel_notkept' | 'cancel_repaired' | 'chdir' | 'check_foreign' | 'check_root' | 'chroot' |
		//	'collapse_destination_dir' | 'command' | 'compare' | 'copy_backup' | 'copy_patterns' | 'copy_size' |
		//	'copylink_patterns' | 'ctime' | 'db_server_connection_db' | 'db_server_host' | 'db_server_owner' |
		//	'db_server_password' | 'db_server_type' | 'delete_if_contains_from_list' | 'delete_if_match_from_list' |
		//	'delete_if_not_contains_from_list' | 'delete_if_not_match_from_list' | 'delete_if_not_startwith_from_list' |
		//	'delete_if_startwith_from_list' | 'depth' | 'dirlinks' | 'disable' | 'disable_mode' | 'disable_suffix' | 'edit_backup'
		//	| 'edit_fstab' | 'empty_file_before_editing' | 'encrypt' | 'env_addresses' | 'env_baseline' | 'env_cpus' | 'env_disk'
		//	| 'env_memory' | 'env_name' | 'env_network' | 'env_spec_file' | 'exclude_dirs' | 'exec_group' | 'exec_owner' |
		//	'exec_program' | 'exec_regex' | 'exec_timeout' | 'expireafter' | 'extend_fields' | 'extraction_regex' |
		//	'field_operation' | 'field_separator' | 'field_value' | 'file_result' | 'file_to_print' | 'file_types' | 'findertype'
		//	| 'first_last' | 'force_ipv4' | 'force_update' | 'forward_relationship' | 'freespace' | 'groups' | 'hash' |
		//	'ifelapsed' | 'in_range_define' | 'include_basedir' | 'include_dirs' | 'include_end_delimiter' |
		//	'include_start_delimiter' | 'inference' | 'insert_if_contains_from_list' | 'insert_if_match_from_list' |
		//	'insert_if_not_contains_from_list' | 'insert_if_not_match_from_list' | 'insert_if_not_startwith_from_list' |
		//	'insert_if_startwith_from_list' | 'ipv4_address' | 'ipv4_netmask' | 'ipv6_address' | 'issymlinkto' | 'leaf_name' |
		//	'link_children' | 'link_type' | 'linkcopy_patterns' | 'log_failed' | 'log_kept' | 'log_level' | 'log_priority' |
		//	'log_repaired' | 'log_string' | 'match_range' | 'max_file_size' | 'measurement_class' | 'mode' | 'mount_options' |
		//	'mount_server' | 'mount_source' | 'mount_type' | 'mtime' | 'newname' | 'no_output' | 'number_of_lines' | 'occurrences'
		//	| 'out_of_range_define' | 'owners' | 'package_add_command' | 'package_arch_regex' | 'package_changes' |
		//	'package_delete_command' | 'package_delete_convention' | 'package_file_repositories' | 'package_installed_regex' |
		//	'package_list_arch_regex' | 'package_list_command' | 'package_list_name_regex' | 'package_list_update_command' |
		//	'package_list_update_ifelapsed' | 'package_list_version_regex' | 'package_multiline_start' | 'package_name_convention'
		//	| 'package_name_regex' | 'package_noverify_regex' | 'package_noverify_returncode' | 'package_patch_arch_regex' |
		//	'package_patch_command' | 'package_patch_installed_regex' | 'package_patch_list_command' | 'package_patch_name_regex'
		//	| 'package_patch_version_regex' | 'package_update_command' | 'package_verify_command' | 'package_version_regex' |
		//	'path_name' | 'persist_time' | 'pgid' | 'pid' | 'portnumber' | 'post_assoc_pattern' | 'ppid' | 'pre_assoc_pattern' |
		//	'preserve' | 'preview' | 'priority' | 'process_owner' | 'process_result' | 'promise_kept' | 'promise_repaired' |
		//	'purge' | 'recognize_join' | 'repair_denied' | 'repair_failed' | 'repair_timeout' | 'replace_value' | 'report_changes'
		//	| 'report_diffs' | 'report_level' | 'rmdeadlinks' | 'rmdirs' | 'rotate' | 'rsize' | 'rxdirs' | 'scan_arrivals' |
		//	'search_bsdflags' | 'search_groups' | 'search_mode' | 'search_owners' | 'search_size' | 'select_end' | 'select_field'
		//	| 'select_line_matching' | 'select_line_number' | 'select_start' | 'sensible_count' |
		//	'sensible_size' | 'servers' | 'service_args' | 'service_autostart_policy' | 'service_dependence_chain' |
		//	'service_type' | 'source' | 'specify_inherit_aces' | 'status' | 'stealth' | 'stime_range' | 'threads' | 'timeout' |
		//	'timer_policy' | 'track_growing_file' | 'traverse_links' | 'trustkey' | 'ttime_range' | 'tty' | 'type_check' | 'umask'
		//	| 'unmount' | 'update_hashes' | 'useshell' | 'value_kept' | 'value_notkept' | 'value_repaired' | 'value_separator' |
		//	'verify' | 'vsize' | 'when_linking_children' | 'when_no_source' | 'xdev');* ///TODO
		//BundleComponent:
		//	name= / *('common' | 'agent' | 'server' | 'monitor' | 'runagent' | 'executor' | 'knowledge' | 'reporter' | 'edit_line' |
		//	'edit_xml' | 'usebundle')* /ID;
		public ParserRule getRule() { return rule; }

		//name= / *('common' | 'agent' | 'server' | 'monitor' | 'runagent' | 'executor' | 'knowledge' | 'reporter' | 'edit_line' |
		//	'edit_xml' | 'usebundle')* /ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		/// *('common' | 'agent' | 'server' | 'monitor' | 'runagent' | 'executor' | 'knowledge' | 'reporter' | 'edit_line' |
		//	'edit_xml' | 'usebundle')* /ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BodyComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BodyComponent");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////common
		/// *
		//CompoundBody:
		//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
		//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
		//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
		//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
		//	'infer' | 'match_value');* /BodyComponent:
		//	name= / *('printfile' | 'action' | 'transaction' | 'classes' | 'contain' | 'database_server' | 'environment_interface' |
		//	'environment_resources' | 'acl' | 'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' |
		//	'file_select' | 'link_from' | 'perms' | 'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' |
		//	'match_value' | 'edit_field' | 'replace_with' | 'tcp_ip' | 'package_method' | 'process_count' | 'process_select' |
		//	'service_method' | 'mount' | 'volume' | 'association' | 'infer' | 'common')* /ID;
		public ParserRule getRule() { return rule; }

		//name= / *('printfile' | 'action' | 'transaction' | 'classes' | 'contain' | 'database_server' | 'environment_interface' |
		//	'environment_resources' | 'acl' | 'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' |
		//	'file_select' | 'link_from' | 'perms' | 'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' |
		//	'match_value' | 'edit_field' | 'replace_with' | 'tcp_ip' | 'package_method' | 'process_count' | 'process_select' |
		//	'service_method' | 'mount' | 'volume' | 'association' | 'infer' | 'common')* /ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		/// *('printfile' | 'action' | 'transaction' | 'classes' | 'contain' | 'database_server' | 'environment_interface' |
		//	'environment_resources' | 'acl' | 'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' |
		//	'file_select' | 'link_from' | 'perms' | 'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' |
		//	'match_value' | 'edit_field' | 'replace_with' | 'tcp_ip' | 'package_method' | 'process_count' | 'process_select' |
		//	'service_method' | 'mount' | 'volume' | 'association' | 'infer' | 'common')* /ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private CfModelElements pCfModel;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	private PLACEHOLDERElements pPLACEHOLDER;
	private AbstractElementElements pAbstractElement;
	private PartElements pPart;
	private BundleElements pBundle;
	private BodyElements pBody;
	private BodyFunctionElements pBodyFunction;
	private SpecialFunctionElements pSpecialFunction;
	private BundlePromiseTypeElements pBundlePromiseType;
	private BodyPromiseTypeElements pBodyPromiseType;
	private BundleComponentElements pBundleComponent;
	private BodyComponentElements pBodyComponent;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public CfeditorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//CfModel:
	//	elements+=AbstractElement*;
	public CfModelElements getCfModelAccess() {
		return (pCfModel != null) ? pCfModel : (pCfModel = new CfModelElements());
	}
	
	public ParserRule getCfModelRule() {
		return getCfModelAccess().getRule();
	}

	////TODO delete '^'?
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	////terminal STRING:
	////	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | '"'))* '"' |
	////	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\' ) | !('\\' | "'"))* "'";
	////terminal STRING:
	////'"'('\\"'|!('"'))*'"';
	////TODO works but not fine when \" occurs
	//terminal STRING:
	//	"\"" (!("\\" | "\"") | "\\" .)* "\"" | "\'" (!("\\" | "\'") | "\\" .)* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	////terminal STRING: '"'->'"'|"'"->"'"; //without escaping
	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//PLACEHOLDER returns ecore::EString:
	//	ANY_OTHER | ID | STRING | "=>" | ";" | "," | "(" | ")";
	public PLACEHOLDERElements getPLACEHOLDERAccess() {
		return (pPLACEHOLDER != null) ? pPLACEHOLDER : (pPLACEHOLDER = new PLACEHOLDERElements());
	}
	
	public ParserRule getPLACEHOLDERRule() {
		return getPLACEHOLDERAccess().getRule();
	}

	//AbstractElement:
	//	Part;
	public AbstractElementElements getAbstractElementAccess() {
		return (pAbstractElement != null) ? pAbstractElement : (pAbstractElement = new AbstractElementElements());
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Part:
	//	Bundle | Body;
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	//Bundle:
	//	"bundle" component=BundleComponent name=ID PLACEHOLDER* "{" (promiseType+=BundlePromiseType ":" PLACEHOLDER*)*
	//	/ *(methods+=Methode)* * / "}";
	public BundleElements getBundleAccess() {
		return (pBundle != null) ? pBundle : (pBundle = new BundleElements());
	}
	
	public ParserRule getBundleRule() {
		return getBundleAccess().getRule();
	}

	////BodyPromiseType '=>' (values+=STRING | '{' values+=STRING
	//Body:
	//	"body" component=BodyComponent name=ID ("(" variables+=ID ("," variables+=ID)* ")")? "{" promiseType+=BodyFunction*
	//	"}";
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	////	(',' values+=STRING)* '}') ';'
	//BodyFunction:
	//	name=BodyPromiseType "=>" (values+=STRING | List?="{" values+=STRING ("," values+=STRING)* "}" |
	//	function+=SpecialFunction) ";";
	public BodyFunctionElements getBodyFunctionAccess() {
		return (pBodyFunction != null) ? pBodyFunction : (pBodyFunction = new BodyFunctionElements());
	}
	
	public ParserRule getBodyFunctionRule() {
		return getBodyFunctionAccess().getRule();
	}

	//SpecialFunction:
	//	name=ID "(" parameters+=STRING ("," parameters+=STRING)* ")";
	public SpecialFunctionElements getSpecialFunctionAccess() {
		return (pSpecialFunction != null) ? pSpecialFunction : (pSpecialFunction = new SpecialFunctionElements());
	}
	
	public ParserRule getSpecialFunctionRule() {
		return getSpecialFunctionAccess().getRule();
	}

	/// *Methode:
	//name=STRING (';'|zuweisung+=Zuweisung (','zuweisung+=Zuweisung)*';');
	//
	//Zuweisung:
	//name=ID ('=>' (ID|STRING)* )?;* /BundlePromiseType:
	//	name=ID;
	public BundlePromiseTypeElements getBundlePromiseTypeAccess() {
		return (pBundlePromiseType != null) ? pBundlePromiseType : (pBundlePromiseType = new BundlePromiseTypeElements());
	}
	
	public ParserRule getBundlePromiseTypeRule() {
		return getBundlePromiseTypeAccess().getRule();
	}

	/// *BundlePromiseType:
	//	name=('access' | 'classes' | 'commands' | 'databases' | 'environments' | 'files' | 'inferences' | 'interfaces' |
	//	'measurements' | 'methods' | 'occurrences' | 'outputs' | 'packages' | 'processes' | 'reports' | 'roles' | 'services' |
	//	'storage' | 'topics' | 'vars');* /BodyPromiseType:
	//	name=ID;
	public BodyPromiseTypeElements getBodyPromiseTypeAccess() {
		return (pBodyPromiseType != null) ? pBodyPromiseType : (pBodyPromiseType = new BodyPromiseTypeElements());
	}
	
	public ParserRule getBodyPromiseTypeRule() {
		return getBodyPromiseTypeAccess().getRule();
	}

	/// *BodyPromiseType:
	//	name=('aces' | 'acl_directory_inherit' | 'acl_method' | 'acl_type' | 'action_policy' | 'allow_blank_fields' |
	//	'associates' | 'atime' | 'audit' | 'background' | 'backward_relationship' | 'before_after' | 'bsdflags' |
	//	'cancel_kept' | 'cancel_notkept' | 'cancel_repaired' | 'chdir' | 'check_foreign' | 'check_root' | 'chroot' |
	//	'collapse_destination_dir' | 'command' | 'compare' | 'copy_backup' | 'copy_patterns' | 'copy_size' |
	//	'copylink_patterns' | 'ctime' | 'db_server_connection_db' | 'db_server_host' | 'db_server_owner' |
	//	'db_server_password' | 'db_server_type' | 'delete_if_contains_from_list' | 'delete_if_match_from_list' |
	//	'delete_if_not_contains_from_list' | 'delete_if_not_match_from_list' | 'delete_if_not_startwith_from_list' |
	//	'delete_if_startwith_from_list' | 'depth' | 'dirlinks' | 'disable' | 'disable_mode' | 'disable_suffix' | 'edit_backup'
	//	| 'edit_fstab' | 'empty_file_before_editing' | 'encrypt' | 'env_addresses' | 'env_baseline' | 'env_cpus' | 'env_disk'
	//	| 'env_memory' | 'env_name' | 'env_network' | 'env_spec_file' | 'exclude_dirs' | 'exec_group' | 'exec_owner' |
	//	'exec_program' | 'exec_regex' | 'exec_timeout' | 'expireafter' | 'extend_fields' | 'extraction_regex' |
	//	'field_operation' | 'field_separator' | 'field_value' | 'file_result' | 'file_to_print' | 'file_types' | 'findertype'
	//	| 'first_last' | 'force_ipv4' | 'force_update' | 'forward_relationship' | 'freespace' | 'groups' | 'hash' |
	//	'ifelapsed' | 'in_range_define' | 'include_basedir' | 'include_dirs' | 'include_end_delimiter' |
	//	'include_start_delimiter' | 'inference' | 'insert_if_contains_from_list' | 'insert_if_match_from_list' |
	//	'insert_if_not_contains_from_list' | 'insert_if_not_match_from_list' | 'insert_if_not_startwith_from_list' |
	//	'insert_if_startwith_from_list' | 'ipv4_address' | 'ipv4_netmask' | 'ipv6_address' | 'issymlinkto' | 'leaf_name' |
	//	'link_children' | 'link_type' | 'linkcopy_patterns' | 'log_failed' | 'log_kept' | 'log_level' | 'log_priority' |
	//	'log_repaired' | 'log_string' | 'match_range' | 'max_file_size' | 'measurement_class' | 'mode' | 'mount_options' |
	//	'mount_server' | 'mount_source' | 'mount_type' | 'mtime' | 'newname' | 'no_output' | 'number_of_lines' | 'occurrences'
	//	| 'out_of_range_define' | 'owners' | 'package_add_command' | 'package_arch_regex' | 'package_changes' |
	//	'package_delete_command' | 'package_delete_convention' | 'package_file_repositories' | 'package_installed_regex' |
	//	'package_list_arch_regex' | 'package_list_command' | 'package_list_name_regex' | 'package_list_update_command' |
	//	'package_list_update_ifelapsed' | 'package_list_version_regex' | 'package_multiline_start' | 'package_name_convention'
	//	| 'package_name_regex' | 'package_noverify_regex' | 'package_noverify_returncode' | 'package_patch_arch_regex' |
	//	'package_patch_command' | 'package_patch_installed_regex' | 'package_patch_list_command' | 'package_patch_name_regex'
	//	| 'package_patch_version_regex' | 'package_update_command' | 'package_verify_command' | 'package_version_regex' |
	//	'path_name' | 'persist_time' | 'pgid' | 'pid' | 'portnumber' | 'post_assoc_pattern' | 'ppid' | 'pre_assoc_pattern' |
	//	'preserve' | 'preview' | 'priority' | 'process_owner' | 'process_result' | 'promise_kept' | 'promise_repaired' |
	//	'purge' | 'recognize_join' | 'repair_denied' | 'repair_failed' | 'repair_timeout' | 'replace_value' | 'report_changes'
	//	| 'report_diffs' | 'report_level' | 'rmdeadlinks' | 'rmdirs' | 'rotate' | 'rsize' | 'rxdirs' | 'scan_arrivals' |
	//	'search_bsdflags' | 'search_groups' | 'search_mode' | 'search_owners' | 'search_size' | 'select_end' | 'select_field'
	//	| 'select_line_matching' | 'select_line_number' | 'select_start' | 'sensible_count' |
	//	'sensible_size' | 'servers' | 'service_args' | 'service_autostart_policy' | 'service_dependence_chain' |
	//	'service_type' | 'source' | 'specify_inherit_aces' | 'status' | 'stealth' | 'stime_range' | 'threads' | 'timeout' |
	//	'timer_policy' | 'track_growing_file' | 'traverse_links' | 'trustkey' | 'ttime_range' | 'tty' | 'type_check' | 'umask'
	//	| 'unmount' | 'update_hashes' | 'useshell' | 'value_kept' | 'value_notkept' | 'value_repaired' | 'value_separator' |
	//	'verify' | 'vsize' | 'when_linking_children' | 'when_no_source' | 'xdev');* ///TODO
	//BundleComponent:
	//	name= / *('common' | 'agent' | 'server' | 'monitor' | 'runagent' | 'executor' | 'knowledge' | 'reporter' | 'edit_line' |
	//	'edit_xml' | 'usebundle')* /ID;
	public BundleComponentElements getBundleComponentAccess() {
		return (pBundleComponent != null) ? pBundleComponent : (pBundleComponent = new BundleComponentElements());
	}
	
	public ParserRule getBundleComponentRule() {
		return getBundleComponentAccess().getRule();
	}

	////common
	/// *
	//CompoundBody:
	//	name=('action' | 'classes' | 'contain' | 'database_server' | 'environment_interface' | 'environment_resources' | 'acl' |
	//	'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' | 'file_select' | 'link_from' | 'perms' |
	//	'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' | 'edit_field' | 'replace_with' | 'tcp_ip'
	//	| 'package_method' | 'process_count' | 'process_select' | 'service_method' | 'mount' | 'volume' | 'association' |
	//	'infer' | 'match_value');* /BodyComponent:
	//	name= / *('printfile' | 'action' | 'transaction' | 'classes' | 'contain' | 'database_server' | 'environment_interface' |
	//	'environment_resources' | 'acl' | 'changes' | 'copy_from' | 'delete' | 'depth_search' | 'edit_defaults' |
	//	'file_select' | 'link_from' | 'perms' | 'rename' | 'select_region' | 'delete_select' | 'insert_select' | 'location' |
	//	'match_value' | 'edit_field' | 'replace_with' | 'tcp_ip' | 'package_method' | 'process_count' | 'process_select' |
	//	'service_method' | 'mount' | 'volume' | 'association' | 'infer' | 'common')* /ID;
	public BodyComponentElements getBodyComponentAccess() {
		return (pBodyComponent != null) ? pBodyComponent : (pBodyComponent = new BodyComponentElements());
	}
	
	public ParserRule getBodyComponentRule() {
		return getBodyComponentAccess().getRule();
	}
}
